[gd_resource type="VisualShader" load_steps=15 format=2]

[ext_resource path="res://PixelLevel/Level.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "frames"

[sub_resource type="VisualShaderNodeScalarOp" id=2]
default_input_values = [ 0, 0.0, 1, 1.0 ]
operator = 1

[sub_resource type="VisualShaderNodeScalarUniform" id=3]
uniform_name = "offset"

[sub_resource type="VisualShaderNodeScalarUniform" id=4]
uniform_name = "fps"

[sub_resource type="VisualShaderNodeScalarOp" id=5]
default_input_values = [ 0, 1.0, 1, 0.0 ]
operator = 3

[sub_resource type="VisualShaderNodeScalarOp" id=6]
operator = 4

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "time"

[sub_resource type="VisualShaderNodeScalarOp" id=8]
default_input_values = [ 0, 0.0, 1, 3.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=9]
function = 14

[sub_resource type="VisualShaderNodeInput" id=10]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=11]
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 0.0345, 0, 0 ) ]
operator = 2

[sub_resource type="VisualShaderNodeVectorOp" id=12]

[sub_resource type="VisualShaderNodeTexture" id=13]
texture = ExtResource( 1 )

[resource]
code = "shader_type canvas_item;
uniform float fps;
uniform float frames;
uniform sampler2D tex_frg_9;



void vertex() {
// Output:0

}

void fragment() {
// Input:6
	vec3 n_out6p0 = vec3(UV, 0.0);

// Input:2
	float n_out2p0 = TIME;

// ScalarUniform:13
	float n_out13p0 = fps;

// ScalarOp:14
	float n_in14p0 = 1.00000;
	float n_out14p0 = n_in14p0 / n_out13p0;

// ScalarOp:15
	float n_out15p0 = mod(n_out2p0, n_out14p0);

// ScalarUniform:10
	float n_out10p0 = frames;

// ScalarOp:11
	float n_in11p1 = 1.00000;
	float n_out11p0 = n_out10p0 - n_in11p1;

// ScalarOp:4
	float n_out4p0 = n_out15p0 * n_out11p0;

// ScalarFunc:5
	float n_out5p0 = floor(n_out4p0);

// VectorOp:7
	vec3 n_in7p1 = vec3(0.03450, 0.00000, 0.00000);
	vec3 n_out7p0 = vec3(n_out5p0) * n_in7p1;

// VectorOp:8
	vec3 n_out8p0 = n_out6p0 + n_out7p0;

// Texture:9
	vec4 tex_frg_9_read = texture(tex_frg_9, n_out8p0.xy);
	vec3 n_out9p0 = tex_frg_9_read.rgb;
	float n_out9p1 = tex_frg_9_read.a;

// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out9p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -402, -276 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1200, 120 )
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -80, 0 )
nodes/fragment/4/node = SubResource( 8 )
nodes/fragment/4/position = Vector2( 280, 140 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( 460, 160 )
nodes/fragment/6/node = SubResource( 10 )
nodes/fragment/6/position = Vector2( 660, 60 )
nodes/fragment/7/node = SubResource( 11 )
nodes/fragment/7/position = Vector2( 660, 140 )
nodes/fragment/8/node = SubResource( 12 )
nodes/fragment/8/position = Vector2( 840, 80 )
nodes/fragment/9/node = SubResource( 13 )
nodes/fragment/9/position = Vector2( 1020, -20 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -100, 220 )
nodes/fragment/11/node = SubResource( 2 )
nodes/fragment/11/position = Vector2( 100, 200 )
nodes/fragment/12/node = SubResource( 3 )
nodes/fragment/12/position = Vector2( -100, 300 )
nodes/fragment/13/node = SubResource( 4 )
nodes/fragment/13/position = Vector2( -280, 120 )
nodes/fragment/14/node = SubResource( 5 )
nodes/fragment/14/position = Vector2( -80, 80 )
nodes/fragment/15/node = SubResource( 6 )
nodes/fragment/15/position = Vector2( 100, 40 )
nodes/fragment/connections = PoolIntArray( 4, 0, 5, 0, 5, 0, 7, 0, 6, 0, 8, 0, 7, 0, 8, 1, 8, 0, 9, 0, 9, 0, 0, 0, 9, 1, 0, 1, 10, 0, 11, 0, 11, 0, 4, 1, 13, 0, 14, 1, 2, 0, 15, 0, 14, 0, 15, 1, 15, 0, 4, 0 )
