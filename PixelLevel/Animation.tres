[gd_resource type="VisualShader" load_steps=11 format=2]

[sub_resource type="VisualShaderNodeScalarUniform" id=1]
uniform_name = "FrameCount"

[sub_resource type="VisualShaderNodeScalarUniform" id=2]
uniform_name = "FrameLength"

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "time"

[sub_resource type="VisualShaderNodeInput" id=4]
input_name = "uv"

[sub_resource type="VisualShaderNodeTextureUniform" id=5]
uniform_name = "Atlas"

[sub_resource type="VisualShaderNodeScalarUniform" id=6]
uniform_name = "FrameWidth"

[sub_resource type="VisualShaderNodeVectorOp" id=7]

[sub_resource type="VisualShaderNodeExpression" id=8]
size = Vector2( 13, 186 )
expression = "floor(uv.x / width)"

[sub_resource type="VisualShaderNodeExpression" id=9]
size = Vector2( 464, 214 )
expression = "floor((time % (count * duration)) / duration)"

[sub_resource type="VisualShaderNodeExpression" id=10]
size = Vector2( 420, 182 )
expression = "Vector3((((offset + frame) % count) - offset) * width, 0, 0)"

[resource]
code = "shader_type canvas_item;
uniform float FrameWidth;
uniform float FrameCount;
uniform float FrameLength;
uniform sampler2D Atlas;



void vertex() {
// Output:0

}

void fragment() {
// Input:21
	vec3 n_out21p0 = vec3(UV, 0.0);

// ScalarUniform:48
	float n_out48p0 = FrameWidth;

// Expression:53
	float n_out53p0;
	n_out53p0 = 0.0;
	{
		floor(n_out21p0.x / n_out48p0)
	}

// Input:2
	float n_out2p0 = TIME;

// ScalarUniform:10
	float n_out10p0 = FrameCount;

// ScalarUniform:13
	float n_out13p0 = FrameLength;

// Expression:54
	float n_out54p0;
	n_out54p0 = 0.0;
	{
		floor((n_out2p0 % (n_out10p0 * n_out13p0)) / n_out13p0)
	}

// Expression:55
	vec3 n_out55p0;
	n_out55p0 = vec3(0.0, 0.0, 0.0);
	{
		Vector3((((n_out53p0 + n_out54p0) % count) - n_out53p0) * width, 0, 0)
	}

// VectorOp:51
	vec3 n_out51p0 = n_out21p0 + n_out55p0;

// TextureUniform:45
	vec3 n_out45p0;
	float n_out45p1;
	{
		vec4 n_tex_read = texture(Atlas, n_out51p0.xy);
		n_out45p0 = n_tex_read.rgb;
		n_out45p1 = n_tex_read.a;
	}

// Output:0
	COLOR.rgb = n_out45p0;
	COLOR.a = n_out45p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( 724, 182.5 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 2100, 520 )
nodes/fragment/2/node = SubResource( 3 )
nodes/fragment/2/position = Vector2( 600, 480 )
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( 600, 560 )
nodes/fragment/13/node = SubResource( 2 )
nodes/fragment/13/position = Vector2( 600, 640 )
nodes/fragment/21/node = SubResource( 4 )
nodes/fragment/21/position = Vector2( 600, 340 )
nodes/fragment/45/node = SubResource( 5 )
nodes/fragment/45/position = Vector2( 1900, 440 )
nodes/fragment/48/node = SubResource( 6 )
nodes/fragment/48/position = Vector2( 600, 260 )
nodes/fragment/51/node = SubResource( 7 )
nodes/fragment/51/position = Vector2( 1900, 320 )
nodes/fragment/53/node = SubResource( 8 )
nodes/fragment/53/position = Vector2( 820, 280 )
nodes/fragment/53/size = Vector2( 13, 186 )
nodes/fragment/53/input_ports = "0,1,uv;1,0,width;"
nodes/fragment/53/output_ports = "0,0,offset;"
nodes/fragment/53/expression = "floor(uv.x / width)"
nodes/fragment/54/node = SubResource( 9 )
nodes/fragment/54/position = Vector2( 820, 480 )
nodes/fragment/54/size = Vector2( 464, 214 )
nodes/fragment/54/input_ports = "0,0,time;1,0,count;2,0,duration;"
nodes/fragment/54/output_ports = "0,0,frame;"
nodes/fragment/54/expression = "floor((time % (count * duration)) / duration)"
nodes/fragment/55/node = SubResource( 10 )
nodes/fragment/55/position = Vector2( 1360, 420 )
nodes/fragment/55/size = Vector2( 420, 182 )
nodes/fragment/55/input_ports = "0,0,offset;1,0,frame;"
nodes/fragment/55/output_ports = "0,1,uv;"
nodes/fragment/55/expression = "Vector3((((offset + frame) % count) - offset) * width, 0, 0)"
nodes/fragment/connections = PoolIntArray( 45, 0, 0, 0, 45, 1, 0, 1, 21, 0, 51, 0, 51, 0, 45, 0, 21, 0, 53, 0, 48, 0, 53, 1, 2, 0, 54, 0, 10, 0, 54, 1, 13, 0, 54, 2, 53, 0, 55, 0, 54, 0, 55, 1, 55, 0, 51, 1 )
